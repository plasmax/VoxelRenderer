set cut_paste_input [stack 0]
version 12.2 v3
push $cut_paste_input
Group {
 name V_Render1
 tile_color 0xbdb039ff
 selected true
 xpos 247
 ypos 230
 addUserKnob {20 VRender}
 addUserKnob {41 format_1 l format T BlinkScript1.format}
 addUserKnob {7 density l Density t "The amount of light absorbed by each voxel. Lower to get a thinner result."}
 density 1
 addUserKnob {3 samples l Samples t "Number of samples per pixel. Higher values will increase accuracy at the cost of speed."}
 samples 128
 addUserKnob {20 graphics l GPU}
 addUserKnob {41 "Local GPU: " T BlinkScript1.gpuName}
 addUserKnob {41 "Use GPU if Available" T BlinkScript1.useGPUIfAvailable}
 addUserKnob {41 maxGPUMemory l "Percentage of GPU memory to use" T BlinkScript1.maxGPUMemory}
 addUserKnob {41 maxTileLines l "Percentage of image height per tile" T BlinkScript1.maxTileLines}
}
 Input {
  inputs 0
  name Inputcam
  label 1
  xpos 655
  ypos -128
  number 1
 }
 Input {
  inputs 0
  name Input
  label 0
  xpos 535
  ypos -127
 }
 Clamp {
  maximum inf
  name Clamp1
  xpos 535
  ypos -38
 }
 BlinkScript {
  recompileCount 2
  ProgramGroup 1
  KernelDescription "2 \"VRender\" iterate pixelWise a604b5c97cabd396fed0640f0dca39e8f373a0616f5fa0bd8c103d2f33ab5115 2 \"voxels\" Read Random \"dst\" Write Point 11 \"Resolution\" Int 3 CgAAAAoAAAAKAAAAAAAAAA== \"bbox_min\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"bbox_max\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"density\" Float 1 AACAPw== \"samples\" Int 1 MgAAAA== \"Width\" Float 1 AAC0RA== \"Height\" Float 1 AIBKRA== \"Focal\" Float 1 AADwQQ== \"Haperture\" Float 1 ppvEQQ== \"cam_M\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"transform_M\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== 11 \"resolution\" 3 1 \"bbox_min\" 3 1 \"bbox_max\" 3 1 \"density\" 1 1 \"samples\" 1 1 \"width\" 1 1 \"height\" 1 1 \"focal\" 1 1 \"haperture\" 1 1 \"cam_M\" 16 1 \"transform_M\" 16 1 10 \"aabb\" Float 3 2 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= \"voxelHalfSize\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"VoxelSizeInv\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"grid_width\" Int 1 1 AAAAAA== \"_samples\" Int 1 1 AAAAAA== \"ratio\" Float 1 1 AAAAAA== \"camera\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"up\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"right\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"forward\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA=="
  kernelSource "kernel VRender : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom> voxels;\n  Image<eWrite> dst;\n\n  param:\n    int3 resolution;\n    float3 bbox_min;\n    float3 bbox_max;\n    float density;\n    int samples;\n    // Camera Parameters\n    float width;\n    float height;\n    float focal;\n    float haperture;\n    float4x4 cam_M;\n    float4x4 transform_M;\n\n  local:\n    float3 aabb\[2];\n    float3 voxelHalfSize;\n    float3 VoxelSizeInv;\n    int grid_width;\n    int _samples;\n    // Camera Parameters\n    float ratio;\n    float3 camera;\n    float3 up;\n    float3 right;\n    float3 forward;\n\n  void define()\n  \{\n    defineParam(resolution, \"Resolution\", int3(10,10,10));\n    defineParam(density, \"density\", 1.0f);\n    defineParam(samples, \"samples\", 50);\n    // Camera Parameters\n    defineParam(width, \"Width\", 1440.0f);\n    defineParam(height, \"Height\", 810.0f);\n    defineParam(focal, \"Focal\", 30.0f);\n    defineParam(haperture, \"Haperture\", 24.576f);\n  \}\n\n  void init()\n  \{\n    aabb\[0] = bbox_min;\n    aabb\[1] = bbox_max;\n    for (int c = 0; c < 3; c++)\n      VoxelSizeInv\[c] = resolution\[c] / (bbox_max\[c] - bbox_min\[c]);\n    voxelHalfSize = 0.5f / VoxelSizeInv;\n    grid_width = voxels.bounds.width();\n    _samples = max(1, samples);\n\n    float4x4 camM = transform_M.invert() * cam_M;\n\n    // Camera Parameters\n    ratio   = focal / haperture; \n    camera  = float3(camM\[0]\[3], camM\[1]\[3], camM\[2]\[3]);\n    up      = normalize(multVectMatrix(float3(0.0f, 1.0f, 0.0f), camM) - camera) * (height / width);\n    right   = normalize(multVectMatrix(float3(1.0f, 0.0f, 0.0f), camM) - camera);\n    forward = normalize(multVectMatrix(float3(0.0f, 0.0f, -1.0f), camM) - camera); \n  \}\n\n  float3 multVectMatrix(float3 vec, float4x4 M)\n  \{\n    float3 out = float3(\n      vec.x * M\[0]\[0] + vec.y * M\[0]\[1] + vec.z * M\[0]\[2] + M\[0]\[3],\n      vec.x * M\[1]\[0] + vec.y * M\[1]\[1] + vec.z * M\[1]\[2] + M\[1]\[3],\n      vec.x * M\[2]\[0] + vec.y * M\[2]\[1] + vec.z * M\[2]\[2] + M\[2]\[3]\n    );\n\n    return out;\n  \}\n\n  float4 voxelValue(int3 voxel)\n  \{\n    // Return Empty for values outside of grid\n    if (voxel.x < 0 || resolution.x <= voxel.x ||\n        voxel.y < 0 || resolution.y <= voxel.y ||\n        voxel.z < 0 || resolution.z <= voxel.z )\n      return 0;\n\n    int id = (voxel.y * resolution.x + voxel.x) * resolution.z + voxel.z;\n    int x = id % grid_width;\n    int y = id / grid_width;\n\n    return voxels(x, y);\n  \}\n  \n\n  float4 Blend(float3 curpos)\n  \{\n    float3 weight, voxel_space;\n    int3 base_voxel, offset;\n    // Lower Bound of 8 adjacent voxels\n    for (int c = 0; c < 3; c++)\n    \{\n      voxel_space\[c] = curpos\[c] * VoxelSizeInv\[c];\n      base_voxel\[c] = int(floor(voxel_space\[c] - 0.5f));\n    \}\n\n    float4 result = 0;\n    for (int i = 0; i < 8; i++)\n    \{\n      // Weighted distance on each axis for each adjacent voxel\n      offset = int3(i / 4, (i / 2) % 2, i % 2);\n      weight.x = 1 - fabs(offset.x - (voxel_space.x - (base_voxel.x + 0.5f)));\n      weight.y = 1 - fabs(offset.y - (voxel_space.y - (base_voxel.y + 0.5f)));\n      weight.z = 1 - fabs(offset.z - (voxel_space.z - (base_voxel.z + 0.5f)));\n\n      result += voxelValue(base_voxel + offset) * weight.x * weight.y * weight.z;\n    \}\n\n    return result;\n  \}\n\n\n  float2 intersection_AABB(float3 origin, float3 inv_dir)\n  \{\n    // Axis aligned bounding box intersection for GPU\n    // aabb = min_corner, max_corner (eg, (0,0,0), (1,1,1))\n    // ray =  origin, direction, inv_dir (1/dir), sign (x < 0 ? 1 : 0)\n    float tmin, tmax, tymin, tymax, tzmin, tzmax;\n    bool sign = inv_dir.x < 0 ? 0 : 1;\n    tmin  = (aabb\[1 - sign].x - origin.x) * inv_dir.x;\n    tmax  = (aabb\[sign].x - origin.x) * inv_dir.x;\n    sign = inv_dir.y < 0 ? 0 : 1;\n    tymin = (aabb\[1 - sign].y - origin.y) * inv_dir.y;\n    tymax = (aabb\[sign].y - origin.y) * inv_dir.y;\n    sign = inv_dir.z < 0 ? 0 : 1;\n    tzmin = (aabb\[1 - sign].z - origin.z) * inv_dir.z;\n    tzmax = (aabb\[sign].z - origin.z) * inv_dir.z;\n    tmin = max(max(tmin, tymin), tzmin);\n    tmax = min(min(tmax, tymax), tzmax);\n    return float2(max(tmin, 0.0f), tmax);\n  \}\n\n\n  void process(int2 pos)\n  \{\n    // Calculating the eye vector\n    float u = pos.x / width - 0.5f;\n    float v = pos.y / height - 0.5f;\n\n    // Ray direction\n    float3 dir = normalize(forward * ratio + right * u + up * v);\n\n    // ========== Box Intersection (Entry and Exit) ==========\n\n    float2 tMinMax = intersection_AABB(camera, 1.0f / dir);\n\n    bool hit = (tMinMax.x < tMinMax.y);// && (tMinMax.x >= near_clip_plane) && (tMinMax.y <= far_clip_plane)\n    if (!hit)\n    \{\n      dst() = 0;\n      return;\n    \}\n\n    // Maximum of 1000 samples per voxel\n    float max_dist = tMinMax.y - tMinMax.x;\n    float deltaT, T = 1, step = max(max_dist / _samples, 0.001f);\n    float3 curpos;\n    float4 result = 0, colour;\n\n    for (float dist = tMinMax.x; dist <= tMinMax.y; dist += step)\n    \{\n      curpos = camera + dir * dist;\n      colour = Blend(curpos - bbox_min);\n      deltaT = exp(-density * colour.w * step);\n      T *= deltaT;\n      result += (1 - deltaT) * colour * T;\n\n      // End loop if Transmittance is near 0\n      if (T < 1e-6)\n        break;\n    \}\n\n    dst() = result;\n    dst(3) = 1 - T;\n  \}\n\};"
  rebuild ""
  VRender_Resolution {{"\[lindex \[metadata resolution] 0]"} {"\[lindex \[metadata resolution] 1]"} {"\[lindex \[metadata resolution] 2]"}}
  VRender_bbox_min {{"\[lindex \[metadata bbox] 0]"} {"\[lindex \[metadata bbox] 1]"} {"\[lindex \[metadata bbox] 2]"}}
  VRender_bbox_max {{"\[lindex \[metadata bbox] 3]"} {"\[lindex \[metadata bbox] 4]"} {"\[lindex \[metadata bbox] 5]"}}
  VRender_density {{parent.density}}
  VRender_samples {{parent.samples}}
  VRender_Width {{"\[lindex \[split \[value this.format] ] 0]"}}
  VRender_Height {{"\[lindex \[split \[value this.format] ] 1]"}}
  VRender_Focal {{group.input1.focal}}
  VRender_Haperture {{group.input1.haperture}}
  VRender_cam_M {
      {{group.input1.world_matrix} {group.input1.world_matrix} {group.input1.world_matrix} {group.input1.world_matrix}}
      {{group.input1.world_matrix} {group.input1.world_matrix} {group.input1.world_matrix} {group.input1.world_matrix}}
      {{group.input1.world_matrix} {group.input1.world_matrix} {group.input1.world_matrix} {group.input1.world_matrix}}
      {{group.input1.world_matrix} {group.input1.world_matrix} {group.input1.world_matrix} {group.input1.world_matrix}}
    }
  VRender_transform_M {
      {{"\[lindex \[lindex \[metadata vTransformMatrix frame] 0] 0]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 0] 1]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 0] 2]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 0] 3]"}}
      {{"\[lindex \[lindex \[metadata vTransformMatrix frame] 1] 0]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 1] 1]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 1] 2]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 1] 3]"}}
      {{"\[lindex \[lindex \[metadata vTransformMatrix frame] 2] 0]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 2] 1]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 2] 2]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 2] 3]"}}
      {{"\[lindex \[lindex \[metadata vTransformMatrix frame] 3] 0]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 3] 1]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 3] 2]"} {"\[lindex \[lindex \[metadata vTransformMatrix frame] 3] 3]"}}
    }
  format "1280 720 0 0 1280 720 1 HD_720"
  specifiedFormat true
  rebuild_finalise ""
  name BlinkScript1
  selected true
  xpos 535
  ypos 91
 }
 Output {
  name Output
  xpos 535
  ypos 222
 }
end_group
