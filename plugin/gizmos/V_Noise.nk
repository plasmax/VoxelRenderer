set cut_paste_input [stack 0]
version 12.2 v3
push $cut_paste_input
Group {
 name V_Noise1
 tile_color 0xc17939ff
 selected true
 xpos 631
 ypos -247
 addUserKnob {20 VFNoise}
 addUserKnob {7 offset l Offset t "Expands or shrinks the noise" R -1 1}
 addUserKnob {7 density l Density R 0 100}
 density 1
 addUserKnob {26 ""}
 addUserKnob {3 seed l Seed}
 seed 123
 addUserKnob {7 size l Size R 0 100}
 size 0.5
 addUserKnob {3 octaves l Octaves}
 octaves 5
 addUserKnob {7 lacunarity l Lacunarity R 0 2}
 lacunarity 1.95
 addUserKnob {7 persistence l Persistence}
 persistence 0.43
 addUserKnob {26 ""}
 addUserKnob {41 operation T ChannelMerge1.operation}
 addUserKnob {41 mix T ChannelMerge1.mix}
 addUserKnob {20 transform l Transform}
 addUserKnob {41 translate T NOISE_TRANSFORM.translate}
 addUserKnob {41 rotate T NOISE_TRANSFORM.rotate}
 addUserKnob {41 scaling l scale T NOISE_TRANSFORM.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T NOISE_TRANSFORM.uniform_scale}
 addUserKnob {41 skew T NOISE_TRANSFORM.skew}
 addUserKnob {41 pivot T NOISE_TRANSFORM.pivot}
 addUserKnob {20 graphics l GPU}
 addUserKnob {41 "Local GPU: " T BlinkScript1.gpuName}
 addUserKnob {41 "Use GPU if Available" T BlinkScript1.useGPUIfAvailable}
 addUserKnob {41 maxGPUMemory l "Percentage of GPU memory to use" T BlinkScript1.maxGPUMemory}
 addUserKnob {41 maxTileLines l "Percentage of image height per tile" T BlinkScript1.maxTileLines}
}
 Axis2 {
  inputs 0
  name NOISE_TRANSFORM
  xpos 397
  ypos -93
  addUserKnob {20 "Ppos Locator"}
  addUserKnob {18 pointPosition l "Point Position"}
  pointPosition {0 0 0}
  addUserKnob {6 pointPosition_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Input {
  inputs 0
  name Input
  xpos 519
  ypos -287
 }
 Dot {
  name Dot1
  note_font_size 20
  xpos 553
  ypos -231
 }
set N45e6b00 [stack 0]
add_layer {voxels voxels.x voxels.y voxels.z voxels.density}
 Shuffle {
  in2 voxels
  red red2
  green green2
  blue blue2
  name Shuffle1
  label "<font size = \"5\"> \[value in]"
  xpos 519
  ypos -191
  postage_stamp true
 }
 BlinkScript {
  recompileCount 1
  ProgramGroup 1
  KernelDescription "2 \"VFNoise\" iterate pixelWise 1ef06e2feb9fa1e26cd67a5927f5113b61bc4529be4a0184eeac0df1f6aa3c87 2 \"voxels\" Read Point \"dst\" Write Point 6 \"seed\" Int 1 AAAAAA== \"Size\" Float 1 AADwQQ== \"Octaves\" Int 1 BAAAAA== \"Lacunarity\" Float 1 AAAAQA== \"Persistence\" Float 1 AAAAPw== \"M\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== 6 \"seed\" 1 1 \"size\" 1 1 \"octaves\" 1 1 \"lacunarity\" 1 1 \"persistence\" 1 1 \"M\" 16 1 3 \"seed_offset\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"frequency\" Float 1 1 AAAAAA== \"M_inv\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="
  kernelSource "// C++11\nconst uint rand_multiplier = 48271;\nconst uint rand_increment  = 0;\nconst uint rand_modulus    = 2147483647;\n\nstatic int lcgRandom( int seed )\n\{\n  return abs( ( seed * rand_multiplier + rand_increment ) % rand_modulus );\n\}\n\n// ===== Interpolation Functions =====\n\nstatic float Smooth (const float &t)\n\{\n  // Fifth degree polynomial\n  return t * t * t * (t * (t * 6.0f - 15.0f) + 10.0f);\n\}\n\nstatic float Lerp (const float &a, const float &b, const float &t)\n\{\n  return (b - a) * clamp(t, 0.0f, 1.0f) + a;\n\}\n\n\n// ===== Noise Function =====\n\nstatic float Perlin3D(float3 point, float frequency)\n\{\n  const int hash\[512] = \{\n    151,160,137, 91, 90, 15,131, 13,201, 95, 96, 53,194,233,  7,225,\n    140, 36,103, 30, 69,142,  8, 99, 37,240, 21, 10, 23,190,  6,148,\n    247,120,234, 75,  0, 26,197, 62, 94,252,219,203,117, 35, 11, 32,\n     57,177, 33, 88,237,149, 56, 87,174, 20,125,136,171,168, 68,175,\n     74,165, 71,134,139, 48, 27,166, 77,146,158,231, 83,111,229,122,\n     60,211,133,230,220,105, 92, 41, 55, 46,245, 40,244,102,143, 54,\n     65, 25, 63,161,  1,216, 80, 73,209, 76,132,187,208, 89, 18,169,\n    200,196,135,130,116,188,159, 86,164,100,109,198,173,186,  3, 64,\n     52,217,226,250,124,123,  5,202, 38,147,118,126,255, 82, 85,212,\n    207,206, 59,227, 47, 16, 58, 17,182,189, 28, 42,223,183,170,213,\n    119,248,152,  2, 44,154,163, 70,221,153,101,155,167, 43,172,  9,\n    129, 22, 39,253, 19, 98,108,110, 79,113,224,232,178,185,112,104,\n    218,246, 97,228,251, 34,242,193,238,210,144, 12,191,179,162,241,\n     81, 51,145,235,249, 14,239,107, 49,192,214, 31,181,199,106,157,\n    184, 84,204,176,115,121, 50, 45,127,  4,150,254,138,236,205, 93,\n    222,114, 67, 29, 24, 72,243,141,128,195, 78, 66,215, 61,156,180,\n\n    \n    151,160,137, 91, 90, 15,131, 13,201, 95, 96, 53,194,233,  7,225,\n    140, 36,103, 30, 69,142,  8, 99, 37,240, 21, 10, 23,190,  6,148,\n    247,120,234, 75,  0, 26,197, 62, 94,252,219,203,117, 35, 11, 32,\n     57,177, 33, 88,237,149, 56, 87,174, 20,125,136,171,168, 68,175,\n     74,165, 71,134,139, 48, 27,166, 77,146,158,231, 83,111,229,122,\n     60,211,133,230,220,105, 92, 41, 55, 46,245, 40,244,102,143, 54,\n     65, 25, 63,161,  1,216, 80, 73,209, 76,132,187,208, 89, 18,169,\n    200,196,135,130,116,188,159, 86,164,100,109,198,173,186,  3, 64,\n     52,217,226,250,124,123,  5,202, 38,147,118,126,255, 82, 85,212,\n    207,206, 59,227, 47, 16, 58, 17,182,189, 28, 42,223,183,170,213,\n    119,248,152,  2, 44,154,163, 70,221,153,101,155,167, 43,172,  9,\n    129, 22, 39,253, 19, 98,108,110, 79,113,224,232,178,185,112,104,\n    218,246, 97,228,251, 34,242,193,238,210,144, 12,191,179,162,241,\n     81, 51,145,235,249, 14,239,107, 49,192,214, 31,181,199,106,157,\n    184, 84,204,176,115,121, 50, 45,127,  4,150,254,138,236,205, 93,\n    222,114, 67, 29, 24, 72,243,141,128,195, 78, 66,215, 61,156,180\n  \};\n\n  const float4 gradients3D\[16] = \{\n    float4( 1.0f,  1.0f,  0.0f, 0.0f),\n    float4(-1.0f,  1.0f,  0.0f, 0.0f),\n    float4( 1.0f, -1.0f,  0.0f, 0.0f),\n    float4(-1.0f, -1.0f,  0.0f, 0.0f),\n    float4( 1.0f,  0.0f,  1.0f, 0.0f),\n    float4(-1.0f,  0.0f,  1.0f, 0.0f),\n    float4( 1.0f,  0.0f, -1.0f, 0.0f),\n    float4(-1.0f,  0.0f, -1.0f, 0.0f),\n    float4( 0.0f,  1.0f,  1.0f, 0.0f),\n    float4( 0.0f, -1.0f,  1.0f, 0.0f),\n    float4( 0.0f,  1.0f, -1.0f, 0.0f),\n    float4( 0.0f, -1.0f, -1.0f, 0.0f),\n    float4( 1.0f,  1.0f,  0.0f, 0.0f),\n    float4(-1.0f,  1.0f,  0.0f, 0.0f),\n    float4( 0.0f, -1.0f,  1.0f, 0.0f),\n    float4( 0.0f, -1.0f, -1.0f, 0.0f)\n  \};\n\n  const int hashMask = 255;\n  const int gradientsMask3D = 15;\n\n  point *= frequency;\n  int ix0 = floor(point.x);\n  int iy0 = floor(point.y);\n  int iz0 = floor(point.z);\n  float tx0 = point.x - ix0;\n  float ty0 = point.y - iy0;\n  float tz0 = point.z - iz0;\n  float tx1 = tx0 - 1.0f;\n  float ty1 = ty0 - 1.0f;\n  float tz1 = tz0 - 1.0f;\n  ix0 &= hashMask;\n  iy0 &= hashMask;\n  iz0 &= hashMask;\n  int ix1 = ix0 + 1;\n  int iy1 = iy0 + 1;\n  int iz1 = iz0 + 1;\n\n  int h0 = hash\[ ix0 ];\n  int h1 = hash\[ ix1 ];\n  int h00 = hash\[ h0 + iy0 ];\n  int h10 = hash\[ h1 + iy0 ];\n  int h01 = hash\[ h0 + iy1 ];\n  int h11 = hash\[ h1 + iy1 ];\n\n  // float3 fails for some unknown reason. Add an empty fourth\n  float4 g000 = gradients3D\[ hash\[ h00 + iz0 ] & gradientsMask3D ];\n  float4 g100 = gradients3D\[ hash\[ h10 + iz0 ] & gradientsMask3D ];\n  float4 g010 = gradients3D\[ hash\[ h01 + iz0 ] & gradientsMask3D ];\n  float4 g110 = gradients3D\[ hash\[ h11 + iz0 ] & gradientsMask3D ];\n  float4 g001 = gradients3D\[ hash\[ h00 + iz1 ] & gradientsMask3D ];\n  float4 g101 = gradients3D\[ hash\[ h10 + iz1 ] & gradientsMask3D ];\n  float4 g011 = gradients3D\[ hash\[ h01 + iz1 ] & gradientsMask3D ];\n  float4 g111 = gradients3D\[ hash\[ h11 + iz1 ] & gradientsMask3D ];\n\n  float v000 = dot(g000, float4(tx0, ty0, tz0, 0.0f));\n  float v100 = dot(g100, float4(tx1, ty0, tz0, 0.0f));\n  float v010 = dot(g010, float4(tx0, ty1, tz0, 0.0f));\n  float v110 = dot(g110, float4(tx1, ty1, tz0, 0.0f));\n  float v001 = dot(g001, float4(tx0, ty0, tz1, 0.0f));\n  float v101 = dot(g101, float4(tx1, ty0, tz1, 0.0f));\n  float v011 = dot(g011, float4(tx0, ty1, tz1, 0.0f));\n  float v111 = dot(g111, float4(tx1, ty1, tz1, 0.0f));\n\n  float tx = Smooth(tx0);\n  float ty = Smooth(ty0);\n  float tz = Smooth(tz0);\n  return Lerp(\n    Lerp(Lerp(v000, v100, tx), Lerp(v010, v110, tx), ty),\n    Lerp(Lerp(v001, v101, tx), Lerp(v011, v111, tx), ty),\n    tz);// * 0.5f + 0.5f;\n\}\n\n\nstatic float Fractal(float3 point, float frequency, int octaves, float lacunarity, float persistence)\n\{\n  \n  float sum = 0;\n  sum = Perlin3D(point, frequency);\n  float amplitude = 1.0f;\n  float range = 1.0f;\n  for (int o = 1; o < octaves; o++) \{\n    frequency *= lacunarity;\n    amplitude *= persistence;\n    range += amplitude;\n    sum += Perlin3D(point, frequency) * amplitude;\n  \}\n  return sum / range;\n\}\n\n\nkernel VFNoise : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead> voxels;\n  Image<eWrite> dst;\n\n  param:\n    int seed;\n    float size;\n    int octaves;\n    float lacunarity;\n    float persistence;\n    float4x4 M;\n\n  local:\n    float3 seed_offset;\n    float frequency;\n    float4x4 M_inv;\n\n  void define()\n  \{\n    defineParam(size, \"Size\", 30.0f);\n    defineParam(octaves, \"Octaves\", 4);\n    defineParam(lacunarity, \"Lacunarity\", 2.0f);\n    defineParam(persistence, \"Persistence\", 0.5f);\n  \}\n\n  void init()\n  \{\n    int random = seed;\n    for (int c = 0; c < 3; c++)\n    \{\n      random = lcgRandom(random);\n      seed_offset\[c] = (random / float(rand_modulus)) * 10000;\n    \}\n    frequency = 1.0f / size;\n    M_inv = M.invert();\n  \}\n\n\n  float3 multVectMatrix(float4 vec, float4x4 M)\n  \{\n    float3 out = float3(\n      vec.x * M\[0]\[0] + vec.y * M\[0]\[1] + vec.z * M\[0]\[2] + M\[0]\[3],\n      vec.x * M\[1]\[0] + vec.y * M\[1]\[1] + vec.z * M\[1]\[2] + M\[1]\[3],\n      vec.x * M\[2]\[0] + vec.y * M\[2]\[1] + vec.z * M\[2]\[2] + M\[2]\[3]\n    );\n\n    return out;\n  \}\n\n\n  void process()\n  \{\n    float4 voxel = voxels();\n    float3 point = multVectMatrix(voxel, M_inv);\n    voxel.w = Fractal(point + seed_offset, frequency, octaves, lacunarity, persistence);\n    dst() = voxel;\n  \}\n    \n\};"
  rebuild ""
  VFNoise_seed {{parent.seed}}
  VFNoise_Size {{parent.size}}
  VFNoise_Octaves {{parent.octaves}}
  VFNoise_Lacunarity {{parent.lacunarity}}
  VFNoise_Persistence {{parent.persistence}}
  group_VFNoise_M 1
  VFNoise_M {
      {{parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix}}
      {{parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix}}
      {{parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix}}
      {{parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix} {parent.NOISE_TRANSFORM.world_matrix}}
    }
  rebuild_finalise ""
  name BlinkScript1
  selected true
  xpos 519
  ypos -78
 }
 Add {
  channels alpha
  value {{parent.offset}}
  name OFFSET
  xpos 519
  ypos -22
 }
 Multiply {
  channels alpha
  value {{parent.density}}
  name DENSITY
  xpos 519
  ypos 16
 }
 Dot {
  name Dot3
  note_font_size 20
  xpos 553
  ypos 82
 }
push $N45e6b00
 Dot {
  name Dot2
  note_font_size 20
  xpos 680
  ypos -231
 }
 ChannelMerge {
  inputs 2
  operation plus
  name ChannelMerge1
  xpos 646
  ypos 65
 }
 Output {
  name Output
  xpos 646
  ypos 145
 }
end_group
